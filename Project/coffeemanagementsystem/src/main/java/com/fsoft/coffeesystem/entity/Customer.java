/*
 * 
 */
package com.fsoft.coffeesystem.entity;

// Generated 11-Jan-2017 22:33:33 by Hibernate Tools 5.2.0.Beta1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

// TODO: Auto-generated Javadoc
/**
 * Customer generated by hbm2java.
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "customer", uniqueConstraints = { @UniqueConstraint(columnNames = "phoneNumber") })
public class Customer implements java.io.Serializable {

	/** The id. */
	private long id;

	/** The name. */
	private String name;

	/** The phone number. */
	private String phoneNumber;

	/** The password. */
	private String password;

	/** The gender. */
	private Byte gender;

	/** The birthday. */
	private Date birthday;

	/** The ward. */
	private Ward ward;

	/** The address. */
	private String address;

	/** The email. */
	private String email;

	/** The point. */
	private Long point;

	/** The description. */
	private String description;

	/** The is delete. */
	private Boolean isDelete;

	/** The orders. */
	private Set<Order> orders = new HashSet<Order>(0);

	/** The store. */
	private Store store;

	/**
	 * Instantiates a new customer.
	 */
	public Customer() {
	}

	/**
	 * Instantiates a new customer.
	 *
	 * @param id
	 *            the id
	 * @param name
	 *            the name
	 * @param phoneNumber
	 *            the phone number
	 * @param password
	 *            the password
	 * @param address
	 *            the address
	 */
	public Customer(long id, String name, String phoneNumber, String password, String address) {
		this.id = id;
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.password = password;
		this.address = address;
	}

	/**
	 * Instantiates a new customer.
	 *
	 * @param id
	 *            the id
	 * @param name
	 *            the name
	 * @param phoneNumber
	 *            the phone number
	 * @param password
	 *            the password
	 * @param gender
	 *            the gender
	 * @param birthday
	 *            the birthday
	 * @param address
	 *            the address
	 * @param email
	 *            the email
	 * @param point
	 *            the point
	 * @param description
	 *            the description
	 * @param orders
	 *            the orders
	 */
	public Customer(long id, String name, String phoneNumber, String password, Byte gender, Date birthday,
			String address, String email, Long point, String description, Set<Order> orders) {
		this.id = id;
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.password = password;
		this.gender = gender;
		this.birthday = birthday;
		this.address = address;
		this.email = email;
		this.point = point;
		this.description = description;
		this.orders = orders;
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 *
	 * @param id
	 *            the new id
	 */
	public void setId(long id) {
		this.id = id;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name
	 */
	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the name.
	 *
	 * @param name
	 *            the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the phone number.
	 *
	 * @return the phone number
	 */
	@Column(name = "phoneNumber", unique = true, nullable = false, length = 11)
	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	/**
	 * Sets the phone number.
	 *
	 * @param phoneNumber
	 *            the new phone number
	 */
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	/**
	 * Gets the password.
	 *
	 * @return the password
	 */
	@Column(name = "password", length = 100)
	public String getPassword() {
		return this.password;
	}

	/**
	 * Sets the password.
	 *
	 * @param password
	 *            the new password
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * Gets the gender.
	 *
	 * @return the gender
	 */
	@Column(name = "gender")
	public Byte getGender() {
		return this.gender;
	}

	/**
	 * Sets the gender.
	 *
	 * @param gender
	 *            the new gender
	 */
	public void setGender(Byte gender) {
		this.gender = gender;
	}

	/**
	 * Gets the birthday.
	 *
	 * @return the birthday
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "birthday", length = 10)
	public Date getBirthday() {
		return this.birthday;
	}

	/**
	 * Sets the birthday.
	 *
	 * @param birthday
	 *            the new birthday
	 */
	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	/**
	 * Gets the address.
	 *
	 * @return the address
	 */
	@Column(name = "address")
	public String getAddress() {
		return this.address;
	}

	/**
	 * Sets the address.
	 *
	 * @param address
	 *            the new address
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * Gets the email.
	 *
	 * @return the email
	 */
	@Column(name = "email")
	public String getEmail() {
		return this.email;
	}

	/**
	 * Sets the email.
	 *
	 * @param email
	 *            the new email
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Gets the point.
	 *
	 * @return the point
	 */
	@Column(name = "point")
	public Long getPoint() {
		return this.point;
	}

	/**
	 * Sets the point.
	 *
	 * @param point
	 *            the new point
	 */
	public void setPoint(Long point) {
		this.point = point;
	}

	/**
	 * Gets the description.
	 *
	 * @return the description
	 */
	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	/**
	 * Sets the description.
	 *
	 * @param description
	 *            the new description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Gets the checks if is delete.
	 *
	 * @return the checks if is delete
	 */
	@Column(name = "isDelete")
	public Boolean getIsDelete() {
		return isDelete;
	}

	/**
	 * Sets the checks if is delete.
	 *
	 * @param isDelete
	 *            the new checks if is delete
	 */
	public void setIsDelete(Boolean isDelete) {
		this.isDelete = isDelete;
	}

	/**
	 * Gets the orders.
	 *
	 * @return the orders
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customer")
	public Set<Order> getOrders() {
		return this.orders;
	}

	/**
	 * Sets the orders.
	 *
	 * @param orders
	 *            the new orders
	 */
	public void setOrders(Set<Order> orders) {
		this.orders = orders;
	}

	/**
	 * Gets the ward.
	 *
	 * @return the ward
	 */
	@ManyToOne
	@JoinColumn(name = "wardId")
	public Ward getWard() {
		return this.ward;
	}

	/**
	 * Sets the ward.
	 *
	 * @param ward
	 *            the new ward
	 */
	public void setWard(Ward ward) {
		this.ward = ward;
	}

	/**
	 * Gets the store.
	 *
	 * @return the store
	 */
	@ManyToOne
	@JoinColumn(name = "storeId")
	public Store getStore() {
		return this.store;
	}

	/**
	 * Sets the store.
	 *
	 * @param store
	 *            the new store
	 */
	public void setStore(Store store) {
		this.store = store;
	}
}
